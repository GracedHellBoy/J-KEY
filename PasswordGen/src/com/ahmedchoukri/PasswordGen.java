/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ahmedchoukri;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author ahmed
 */
public class PasswordGen extends javax.swing.JFrame {

    /**
     * Creates new form PasswordGenFrame
     */
    public PasswordGen() {
        initComponents();
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("key.png")));
        
                // Set JFrame position to the middle of the screen
        setLocationRelativeTo(null);

        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent evt) {

                // Exit Program and clear the clipboard...
                String cleanString = null;
                StringSelection nothing = new StringSelection(cleanString);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(nothing, nothing);
                System.exit(0);

            }

        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaHistory = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldPassword = new javax.swing.JTextField();
        jTextFieldPasswordSize = new javax.swing.JTextField();
        jBtnGenerate = new javax.swing.JButton();
        jButCopy = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabelHistoryCount = new javax.swing.JLabel();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuAction = new javax.swing.JMenu();
        jMenuCopy = new javax.swing.JMenuItem();
        jMenuReset = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuExit = new javax.swing.JMenuItem();
        jMenuOptions = new javax.swing.JMenu();
        jCheckBoxSpecialChars = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("J-KEY Password Generator Tool 1.0");
        setResizable(false);

        jTextAreaHistory.setEditable(false);
        jTextAreaHistory.setColumns(20);
        jTextAreaHistory.setLineWrap(true);
        jTextAreaHistory.setRows(5);
        jTextAreaHistory.setToolTipText("Select+Ctrl+C to Copy");
        jTextAreaHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTextAreaHistory);

        jLabel3.setText("Password Length");

        jTextFieldPassword.setEditable(false);
        jTextFieldPassword.setBackground(new java.awt.Color(204, 255, 0));
        jTextFieldPassword.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jTextFieldPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPassword.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPasswordActionPerformed(evt);
            }
        });

        jTextFieldPasswordSize.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldPasswordSize.setText("10");

        jBtnGenerate.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jBtnGenerate.setText("Generate Password");
        jBtnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGenerateActionPerformed(evt);
            }
        });

        jButCopy.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jButCopy.setText("Copy");
        jButCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButCopyActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel1.setText("Copyright (c) Ahmed Choukri - 2015");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel4.setText("http://www.JTC-Ngin.org");

        jLabelHistoryCount.setText("Passwords Generated: ");

        jMenuAction.setText("Action");

        jMenuCopy.setText("Copy Password");
        jMenuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCopyActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuCopy);

        jMenuReset.setText("Reset");
        jMenuReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuResetActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuReset);
        jMenuAction.add(jSeparator1);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuAction.add(jMenuExit);

        jMenuBarMain.add(jMenuAction);

        jMenuOptions.setText("Options");

        jCheckBoxSpecialChars.setSelected(true);
        jCheckBoxSpecialChars.setText("Use Special Charecters");
        jMenuOptions.add(jCheckBoxSpecialChars);
        jMenuOptions.add(jSeparator2);

        jMenuBarMain.add(jMenuOptions);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(198, 198, 198))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelHistoryCount, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldPasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addComponent(jBtnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButCopy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addComponent(jButCopy, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                    .addComponent(jBtnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelHistoryCount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPasswordActionPerformed

    private void jBtnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGenerateActionPerformed

        if (jCheckBoxSpecialChars.isSelected()) {

            int fullPasswordSize = Integer.parseInt(jTextFieldPasswordSize.getText());

            ArrayList<String> fullPasswordElements = new ArrayList<>();

            fullPasswordElements.add("A");
            fullPasswordElements.add("B");
            fullPasswordElements.add("C");
            fullPasswordElements.add("D");
            fullPasswordElements.add("E");
            fullPasswordElements.add("F");
            fullPasswordElements.add("G");
            fullPasswordElements.add("H");
            fullPasswordElements.add("I");
            fullPasswordElements.add("J");
            fullPasswordElements.add("K");
            fullPasswordElements.add("L");
            fullPasswordElements.add("M");
            fullPasswordElements.add("N");
            fullPasswordElements.add("O");
            fullPasswordElements.add("P");
            fullPasswordElements.add("Q");
            fullPasswordElements.add("R");
            fullPasswordElements.add("S");
            fullPasswordElements.add("T");
            fullPasswordElements.add("U");
            fullPasswordElements.add("V");
            fullPasswordElements.add("W");
            fullPasswordElements.add("X");
            fullPasswordElements.add("Y");
            fullPasswordElements.add("Z");

            fullPasswordElements.add("0");
            fullPasswordElements.add("1");
            fullPasswordElements.add("2");
            fullPasswordElements.add("3");
            fullPasswordElements.add("4");
            fullPasswordElements.add("5");
            fullPasswordElements.add("6");
            fullPasswordElements.add("7");
            fullPasswordElements.add("8");
            fullPasswordElements.add("9");

            fullPasswordElements.add("!");
            fullPasswordElements.add("@");
            fullPasswordElements.add("#");
            fullPasswordElements.add("$");
            fullPasswordElements.add("%");
            fullPasswordElements.add("+");
            fullPasswordElements.add("/");
            fullPasswordElements.add("&");
            fullPasswordElements.add(":");
            fullPasswordElements.add("?");
            fullPasswordElements.add("-");
            fullPasswordElements.add("=");

            fullPasswordElements.add("a");
            fullPasswordElements.add("b");
            fullPasswordElements.add("c");
            fullPasswordElements.add("d");
            fullPasswordElements.add("e");
            fullPasswordElements.add("f");
            fullPasswordElements.add("g");
            fullPasswordElements.add("h");
            fullPasswordElements.add("i");
            fullPasswordElements.add("j");
            fullPasswordElements.add("k");
            fullPasswordElements.add("l");
            fullPasswordElements.add("m");
            fullPasswordElements.add("n");
            fullPasswordElements.add("o");
            fullPasswordElements.add("p");
            fullPasswordElements.add("q");
            fullPasswordElements.add("r");
            fullPasswordElements.add("s");
            fullPasswordElements.add("t");
            fullPasswordElements.add("u");
            fullPasswordElements.add("v");
            fullPasswordElements.add("w");
            fullPasswordElements.add("x");
            fullPasswordElements.add("y");
            fullPasswordElements.add("z");

            StringBuilder composer = new StringBuilder();

            for (int i = 0; i < fullPasswordSize; i++) {

                Random randomIndx = new Random();
                int arrayIndexID = randomIndx.nextInt(fullPasswordElements.size());
                String password = composer.append(fullPasswordElements.get(arrayIndexID)).toString();
                jTextFieldPassword.setText(password);

            }
            jTextAreaHistory.append(jTextFieldPassword.getText() + "\n");
            

              

        } else {
            
         int noCharsPasswordSize = Integer.parseInt(jTextFieldPasswordSize.getText());

            ArrayList<String> noCharsPasswordElements = new ArrayList<>();

            noCharsPasswordElements.add("A");
            noCharsPasswordElements.add("B");
            noCharsPasswordElements.add("C");
            noCharsPasswordElements.add("D");
            noCharsPasswordElements.add("E");
            noCharsPasswordElements.add("F");
            noCharsPasswordElements.add("G");
            noCharsPasswordElements.add("H");
            noCharsPasswordElements.add("I");
            noCharsPasswordElements.add("J");
            noCharsPasswordElements.add("K");
            noCharsPasswordElements.add("L");
            noCharsPasswordElements.add("M");
            noCharsPasswordElements.add("N");
            noCharsPasswordElements.add("O");
            noCharsPasswordElements.add("P");
            noCharsPasswordElements.add("Q");
            noCharsPasswordElements.add("R");
            noCharsPasswordElements.add("S");
            noCharsPasswordElements.add("T");
            noCharsPasswordElements.add("U");
            noCharsPasswordElements.add("V");
            noCharsPasswordElements.add("W");
            noCharsPasswordElements.add("X");
            noCharsPasswordElements.add("Y");
            noCharsPasswordElements.add("Z");

            noCharsPasswordElements.add("0");
            noCharsPasswordElements.add("1");
            noCharsPasswordElements.add("2");
            noCharsPasswordElements.add("3");
            noCharsPasswordElements.add("4");
            noCharsPasswordElements.add("5");
            noCharsPasswordElements.add("6");
            noCharsPasswordElements.add("7");
            noCharsPasswordElements.add("8");
            noCharsPasswordElements.add("9");

            noCharsPasswordElements.add("a");
            noCharsPasswordElements.add("b");
            noCharsPasswordElements.add("c");
            noCharsPasswordElements.add("d");
            noCharsPasswordElements.add("e");
            noCharsPasswordElements.add("f");
            noCharsPasswordElements.add("g");
            noCharsPasswordElements.add("h");
            noCharsPasswordElements.add("i");
            noCharsPasswordElements.add("j");
            noCharsPasswordElements.add("k");
            noCharsPasswordElements.add("l");
            noCharsPasswordElements.add("m");
            noCharsPasswordElements.add("n");
            noCharsPasswordElements.add("o");
            noCharsPasswordElements.add("p");
            noCharsPasswordElements.add("q");
            noCharsPasswordElements.add("r");
            noCharsPasswordElements.add("s");
            noCharsPasswordElements.add("t");
            noCharsPasswordElements.add("u");
            noCharsPasswordElements.add("v");
            noCharsPasswordElements.add("w");
            noCharsPasswordElements.add("x");
            noCharsPasswordElements.add("y");
            noCharsPasswordElements.add("z");

            StringBuilder noCharsComposer = new StringBuilder();

            for (int i = 0; i < noCharsPasswordSize; i++) {

                Random noCharsRandomIndx = new Random();
                int noCharsArrayIndexID = noCharsRandomIndx.nextInt(noCharsPasswordElements.size());
                String noCharsPassword = noCharsComposer.append(noCharsPasswordElements.get(noCharsArrayIndexID)).toString();
                jTextFieldPassword.setText(noCharsPassword);

            }
            jTextAreaHistory.append(jTextFieldPassword.getText() + "\n");
        }
            
            String counterTitle = "Passwords Generated: ";
            String left = "[ "; 
            String right = " ]";
            jLabelHistoryCount.setText(counterTitle+left+String.valueOf(jTextAreaHistory.getLineCount()-1)+right);
    }//GEN-LAST:event_jBtnGenerateActionPerformed

    private void jButCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButCopyActionPerformed
        
        jTextFieldPassword.selectAll();
        jTextFieldPassword.copy();

    }//GEN-LAST:event_jButCopyActionPerformed

    private void jMenuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCopyActionPerformed
        
        jTextFieldPassword.selectAll();
        jTextFieldPassword.copy();

        
    }//GEN-LAST:event_jMenuCopyActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
       
        // Exit Program and clear the clipboard...
        String cleanString = null;
        StringSelection nothing = new StringSelection(cleanString);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(nothing, nothing);
        System.exit(0);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuResetActionPerformed
       jTextFieldPassword.setText(null);
       String defaultSize = "10";
       jTextFieldPasswordSize.setText(defaultSize);
       jTextAreaHistory.setText(null);
       String resetCount ="Passwords Generated: ";
       jLabelHistoryCount.setText(resetCount);
    }//GEN-LAST:event_jMenuResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordGen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PasswordGen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnGenerate;
    private javax.swing.JButton jButCopy;
    private javax.swing.JCheckBoxMenuItem jCheckBoxSpecialChars;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelHistoryCount;
    private javax.swing.JMenu jMenuAction;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenuItem jMenuCopy;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuOptions;
    private javax.swing.JMenuItem jMenuReset;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextAreaHistory;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldPasswordSize;
    // End of variables declaration//GEN-END:variables
}
